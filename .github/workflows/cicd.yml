name: Build

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=CodeTesting
        
      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy
        
      - name: Trivy FS Scan
        run: |
          trivy fs --format table -o trivy-fs-report.html .

# name: CICD Pipeline
# deep
# on:
#   push:
#     branches: [ "main" ]

# jobs:
#   build:

#     runs-on: self-hosted

#     steps:
#     - uses: actions/checkout@v3
#     - name: Set up JDK 17
#       uses: actions/setup-java@v3
#       with:
#         java-version: '17'
#         distribution: 'temurin'
#         cache: maven
#     - name: Build with Maven
#       run: mvn package --file pom.xml

#     - uses: actions/upload-artifact@v4
#       with:
#         name: Boardgame
#         path: target/*.jar

#     - name: Install Trivy
#       run: |
#         sudo apt-get update && sudo apt-get install -y wget apt-transport-https gnupg lsb-release
#         wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
#         echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
#         sudo apt-get update && sudo apt-get install -y trivy
        
#     - name: Trivy FS Scan
#       run: |
#         trivy fs --format table -o trivy-fs-report.html .

#     - name: SonarQube Scan
#       uses: sonarsource/sonarqube-scan-action@master
#       env:
#         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

#     - name: Install jq
#       run: sudo apt-get update && sudo apt-get install -y jq

#   # Check the Quality Gate status.
#     - name: SonarQube Quality Gate check
#       id: sonarqube-quality-gate-check
#       uses: sonarsource/sonarqube-quality-gate-action@master
#       # Force to fail step after specific time.
#       timeout-minutes: 5
#       env:
#        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

#     - name: Set up QEMU
#       uses: docker/setup-qemu-action@v3

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3

#     - name: Build Docker Image
#       run: |
#         docker build -t adijaiswal/boardgame:latest .

#     - name: Trivy Image Scan
#       run: |
#         trivy image --format table -o trivy-image-report.html adijaiswal/board:latest

#     - name: Login to Docker Hub
#       uses: docker/login-action@v3
#       with:
#         username: ${{ secrets.DOCKERHUB_USERNAME }}
#         password: ${{ secrets.DOCKERHUB_TOKEN }}
# # deep
#     - name: Push Docker Image
#       run: |
#           docker push adijaiswal/boardgame:latest
          
#     - name: Kubectl Action
#       uses: tale/kubectl-action@v1
#       with:
#         base64-kube-config: ${{ secrets.KUBE_CONFIG }}
#     - run: |
#           kubectl apply -f deployment-service.yaml -n webapps
#           kubectl get svc -n webapps

    
